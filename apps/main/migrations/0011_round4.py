# Generated by Django 3.2.5 on 2021-11-04 09:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dictionary', '0002_round1_imports'),
        ('main', '0010_round3_6'),
    ]

    operations = [
        migrations.CreateModel(
            name='FunPointType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('name', models.CharField(max_length=500, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('organization', models.ForeignKey(blank=True, help_text='general type if this field is empty', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fun_points_types', to='main.organization', verbose_name='customer')),
            ],
            options={
                'verbose_name': 'modules / functional point type',
                'verbose_name_plural': 'modules / functional point types',
                'ordering': ['name'],
                'unique_together': {('organization', 'name')},
            },
        ),
        migrations.CreateModel(
            name='FunPointTypeDifficultyLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('name', models.CharField(max_length=500, verbose_name='name')),
                ('factor', models.FloatField(default=1, verbose_name='factor')),
                ('sorting', models.IntegerField(default=0, verbose_name='sorting')),
                ('fun_point_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='difficulty_levels', to='main.funpointtype', verbose_name='difficulty level')),
            ],
            options={
                'verbose_name': 'difficulty level',
                'verbose_name_plural': 'difficulty levels',
                'ordering': ['sorting', 'id'],
                'unique_together': {('fun_point_type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='FunPointTypePositionLaborEstimate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('hours', models.FloatField(default=1, help_text='in hours', verbose_name='standard')),
                ('sorting', models.IntegerField(default=0, verbose_name='сортировка')),
                ('fun_point_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions_labor_estimates', to='main.funpointtype', verbose_name='difficulty level')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fun_points_types_labor_estimates', to='dictionary.position', verbose_name='position')),
            ],
            options={
                'verbose_name': 'labor standard',
                'verbose_name_plural': 'labor standards',
                'ordering': ['sorting', 'id'],
                'unique_together': {('fun_point_type', 'position')},
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('name', models.CharField(max_length=500, verbose_name='name')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start date')),
                ('deadline_date', models.DateField(blank=True, null=True, verbose_name='deadline')),
                ('goals', models.TextField(blank=True, null=True, verbose_name='goals')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('sorting', models.IntegerField(default=0, verbose_name='sorting')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='modules', to=settings.AUTH_USER_MODEL, verbose_name='manager')),
            ],
            options={
                'verbose_name': 'module',
                'verbose_name_plural': 'modules',
                'ordering': ['sorting', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ModuleFunPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('name', models.CharField(max_length=500, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('sorting', models.IntegerField(default=0, verbose_name='sorting')),
                ('difficulty_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fun_points', to='main.funpointtypedifficultylevel', verbose_name='difficulty level')),
                ('fun_point_type', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='fun_points', to='main.funpointtype', verbose_name='type')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fun_points', to='main.module', verbose_name='module')),
            ],
            options={
                'verbose_name': 'functional point',
                'verbose_name_plural': 'functional points',
                'ordering': ['sorting', 'id'],
                'unique_together': {('module', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ModulePositionLaborEstimate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('count', models.PositiveIntegerField(default=1, verbose_name='count')),
                ('hours', models.FloatField(default=1, verbose_name='man-hours')),
                ('sorting', models.IntegerField(default=0, verbose_name='sorting')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions_labor_estimates', to='main.module', verbose_name='module')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules_positions_labor_estimates', to='dictionary.position', verbose_name='position')),
            ],
            options={
                'verbose_name': 'labor standard',
                'verbose_name_plural': 'labor standards',
                'ordering': ['sorting', 'id'],
                'unique_together': {('module', 'position')},
            },
        ),
        migrations.AlterModelOptions(
            name='organizationproject',
            options={'ordering': ['name'], 'verbose_name': 'project', 'verbose_name_plural': 'projects'},
        ),
        migrations.AlterModelOptions(
            name='organizationprojectcarditem',
            options={'verbose_name': 'organizations / organization project card', 'verbose_name_plural': 'organizations / organization project cards'},
        ),
        migrations.AlterModelOptions(
            name='organizationprojectcarditemtemplate',
            options={'verbose_name': 'organizations / organization project card template', 'verbose_name_plural': 'organizations / organization project card templates'},
        ),
        migrations.AlterModelOptions(
            name='request',
            options={'ordering': ['priority', '-id'], 'verbose_name': 'request', 'verbose_name_plural': 'requests'},
        ),
        migrations.AlterModelOptions(
            name='requestrequirement',
            options={'ordering': ['sorting', 'name'], 'verbose_name': 'requests / requirement', 'verbose_name_plural': 'requests / requirements'},
        ),
        migrations.AlterModelOptions(
            name='requestrequirementcv',
            options={'ordering': ['-id'], 'verbose_name': 'CV', 'verbose_name_plural': 'CVs'},
        ),
        migrations.AlterModelOptions(
            name='requesttype',
            options={'ordering': ['name'], 'verbose_name': 'requests / request type', 'verbose_name_plural': 'requests / request types'},
        ),
        migrations.AlterModelOptions(
            name='timesheetrow',
            options={'ordering': ['-date_from'], 'verbose_name': 'requests / timesheet', 'verbose_name_plural': 'requests / timesheets'},
        ),
        migrations.RemoveField(
            model_name='request',
            name='project',
        ),
        migrations.AlterField(
            model_name='request',
            name='organization_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='requests', to='main.organizationproject', verbose_name='project'),
        ),
        migrations.DeleteModel(
            name='Project',
        ),
        migrations.AddField(
            model_name='module',
            name='organization_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='main.organizationproject', verbose_name='project'),
        ),
        migrations.AlterUniqueTogether(
            name='module',
            unique_together={('organization_project', 'name')},
        ),
    ]
